# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª utils/bot_state.py —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π

from abc import ABC, abstractmethod
from typing import Optional
import asyncio
from loguru import logger
from database.repository import Repository
from datetime import datetime, timedelta
from aiogram import types, Bot
from utils.message_utils import find_latest_message as find_msg
from utils.config import Config

class BotState(ABC):
    """Abstract base class for bot states"""
    
    @abstractmethod
    async def start(self) -> None:
        """Handle start action"""
        pass
    
    @abstractmethod
    async def stop(self) -> None:
        """Handle stop action"""
        pass
    
    @abstractmethod
    async def handle_message(self, channel_id: str, message_id: int) -> None:
        """Handle message forwarding"""
        pass

class IdleState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    def __init__(self, bot_context):
        self.context = bot_context
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        self.context.state = RunningState(self.context)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in self.context.config.admin_ids:
            try:
                await self.context.bot.send_message(admin_id, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –†–∞–±–æ—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
    
    async def stop(self) -> None:
        pass
    
    async def handle_message(self, channel_id: str, message_id: int) -> None:
        """–í —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –ù–ï –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º"""
        await Repository.save_last_message(channel_id, message_id)
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id} (–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞)")

class RunningState(BotState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –±–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¢–û–õ–¨–ö–û –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    
    def __init__(self, bot_context, auto_forward: bool = False):
        self.context = bot_context
        self._schedule_task = None
        self._current_active_channel = None
        self._current_pinned_message = None
        self._last_pin_time = None
        self.auto_forward = auto_forward
        self._last_check_date = None
        self._processed_slots = set()
        self._start_schedule_task()
    
    def _start_schedule_task(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        if not self._schedule_task or self._schedule_task.done():
            self._schedule_task = asyncio.create_task(self._schedule_check())
    
    async def _schedule_check(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ª–æ–≥–∏–∫–æ–π —Å–º–µ–Ω—ã –¥–Ω—è"""
        try:
            logger.info("üïê –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–¢–û–õ–¨–ö–û –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –±–µ–∑ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏)")
            while True:
                current_date = datetime.now().date()
                current_time = datetime.now().strftime("%H:%M")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–º–µ–Ω–∏–ª—Å—è –ª–∏ –¥–µ–Ω—å
                if self._last_check_date != current_date:
                    logger.info(f"üìÖ –ù–æ–≤—ã–π –¥–µ–Ω—å: {current_date}. –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
                    # –ü—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è –æ—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await self._unpin_all_messages()
                    self._current_active_channel = None
                    self._current_pinned_message = None
                    self._last_pin_time = None
                    self._processed_slots.clear()
                    self._last_check_date = current_date
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                active_channel_info = await self._get_active_channel_info()
                
                if active_channel_info:
                    channel_id = active_channel_info["channel_id"]
                    slot_id = active_channel_info["slot_id"]
                    
                    logger.debug(f"üì∫ –ê–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {channel_id} (—Å–ª–æ—Ç: {slot_id})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —Å–ª–æ—Ç —Å–µ–≥–æ–¥–Ω—è
                    if slot_id not in self._processed_slots:
                        logger.info(f"üÜï –ù–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç {slot_id} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                        
                        # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        await self._unpin_all_messages()
                        
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
                        latest_message_id = await Repository.get_last_message(channel_id)
                        
                        if latest_message_id:
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                            success = await self.context.forward_and_pin_message(channel_id, latest_message_id)
                            
                            if success:
                                self._current_active_channel = channel_id
                                self._current_pinned_message = latest_message_id
                                self._last_pin_time = datetime.now()
                                self._processed_slots.add(slot_id)
                                
                                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–ª–æ—Ç {slot_id} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)")
                            else:
                                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–æ—Ç {slot_id} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                            self._processed_slots.add(slot_id)
                    else:
                        logger.debug(f"‚úÖ –°–ª–æ—Ç {slot_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–µ–≥–æ–¥–Ω—è")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                    if self._current_active_channel:
                        logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ {self._current_active_channel} –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å")
                        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
                        await self._unpin_all_messages()
                        self._current_active_channel = None
                        self._current_pinned_message = None
                        self._last_pin_time = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(60)
                
        except asyncio.CancelledError:
            logger.info("‚èπÔ∏è –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await asyncio.sleep(10)
            if not self._schedule_task.cancelled():
                self._start_schedule_task()
    
    async def _get_active_channel_info(self) -> Optional[dict]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID —Å–ª–æ—Ç–∞"""
        try:
            schedules = await Repository.get_schedules()
            current_time = datetime.now().strftime("%H:%M")
            
            for i, schedule in enumerate(schedules):
                start_time = schedule["start_time"]
                end_time = schedule["end_time"]
                channel_id = schedule["channel_id"]
                
                if self._is_time_in_range(current_time, start_time, end_time):
                    slot_id = f"{channel_id}_{start_time}_{end_time}"
                    
                    logger.debug(f"üìç –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª {channel_id} –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {current_time} (—Å–ª–æ—Ç: {slot_id})")
                    return {
                        "channel_id": channel_id,
                        "slot_id": slot_id,
                        "start_time": start_time,
                        "end_time": end_time
                    }
            
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
            return None
    
    def _is_time_in_range(self, current_time: str, start_time: str, end_time: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω"""
        try:
            def time_to_minutes(time_str):
                h, m = map(int, time_str.split(':'))
                return h * 60 + m
            
            current_minutes = time_to_minutes(current_time)
            start_minutes = time_to_minutes(start_time)
            end_minutes = time_to_minutes(end_time)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
            if end_minutes < start_minutes:
                return current_minutes >= start_minutes or current_minutes < end_minutes
            else:
                return start_minutes <= current_minutes < end_minutes
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return False
    
    async def _unpin_all_messages(self):
        """–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –í–°–ï–• –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö"""
        try:
            target_chats = await Repository.get_target_chats()
            unpinned_count = 0
            
            for chat_id in target_chats:
                pinned_message_id = await Repository.get_pinned_message(str(chat_id))
                if pinned_message_id:
                    try:
                        await self.context.bot.unpin_chat_message(
                            chat_id=chat_id,
                            message_id=pinned_message_id
                        )
                        await Repository.delete_pinned_message(str(chat_id))
                        
                        # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Ç–æ–∂–µ
                        if hasattr(self.context, 'pinned_messages') and str(chat_id) in self.context.pinned_messages:
                            del self.context.pinned_messages[str(chat_id)]
                        
                        unpinned_count += 1
                        logger.info(f"üìå –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {pinned_message_id} –≤ —á–∞—Ç–µ {chat_id}")
                        
                    except Exception as e:
                        error_text = str(e).lower()
                        if any(phrase in error_text for phrase in [
                            "message to unpin not found",
                            "message not found",
                            "message_id_invalid",
                            "bad request: message to unpin not found"
                        ]):
                            # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
                            await Repository.delete_pinned_message(str(chat_id))
                            if hasattr(self.context, 'pinned_messages') and str(chat_id) in self.context.pinned_messages:
                                del self.context.pinned_messages[str(chat_id)]
                            logger.info(f"üìå –ó–∞–ø–∏—Å—å –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ {pinned_message_id} —É–¥–∞–ª–µ–Ω–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {pinned_message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            
            if unpinned_count > 0:
                logger.info(f"üßπ –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ {unpinned_count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö")
            else:
                logger.debug("üßπ –ù–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    async def start(self) -> None:
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ"""
        pass
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self._schedule_task and not self._schedule_task.done():
            self._schedule_task.cancel()
            try:
                await self._schedule_task
            except asyncio.CancelledError:
                pass
        
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        await self._unpin_all_messages()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in self.context.config.admin_ids:
            try:
                await self.context.bot.send_message(admin_id, "‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–∞–±–æ—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
        
        self.context.state = IdleState(self.context)
    
    async def handle_message(self, channel_id: str, message_id: int) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ - –¢–û–õ–¨–ö–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –ë–ï–ó –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
        await Repository.save_last_message(channel_id, message_id)
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id} (–∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –û–¢–ö–õ–Æ–ß–ï–ù–ê)")
        logger.info(f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id} –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
    
    async def find_latest_message(self, channel_id: str) -> Optional[int]:
        """–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ"""
        last_id = await Repository.get_last_message(channel_id)
        return await find_msg(self.context.bot, channel_id, self.context.config.owner_id, last_id)

    async def _rotate_to_next_channel(self) -> bool:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"""
        logger.warning("–ú–µ—Ç–æ–¥ _rotate_to_next_channel –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        return False

    async def _get_active_channel(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        info = await self._get_active_channel_info()
        return info["channel_id"] if info else None
                
class BotContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞"""
    
    def __init__(self, bot, config):
        self.bot = bot
        self.config = config
        self.state: BotState = IdleState(self)
        self.pinned_messages = {}
    
    async def start(self) -> None:
        await self.state.start()
    
    async def stop(self) -> None:
        await self.state.stop()
    
    async def handle_message(self, channel_id: str, message_id: int) -> None:
        """–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        await self.state.handle_message(channel_id, message_id)
    
    async def rotate_now(self) -> bool:
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        if not isinstance(self.state, RunningState):
            logger.warning("–ù–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é —Ä–æ—Ç–∞—Ü–∏—é: –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        active_channel = await self.state._get_active_channel()
        if active_channel:
            message_id = await Repository.get_last_message(active_channel)
            if message_id:
                return await self.forward_and_pin_message(active_channel, message_id)
        return False
    
    async def forward_and_pin_message(self, channel_id: str, message_id: int) -> bool:
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤–æ –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö"""
        try:
            target_chats = await Repository.get_target_chats()
            if not target_chats:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
                return False
            
            success = False
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã
            for chat_id in target_chats:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                    prev_pinned = await Repository.get_pinned_message(str(chat_id))
                    
                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        fwd = await self.bot.forward_message(
                            chat_id=chat_id,
                            from_chat_id=channel_id,
                            message_id=message_id
                        )
                        logger.debug(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç {chat_id}")
                        
                        # –í–ê–ñ–ù–û: –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–ï–†–ï–î –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
                        if prev_pinned:
                            try:
                                await self.bot.unpin_chat_message(
                                    chat_id=chat_id,
                                    message_id=prev_pinned
                                )
                                logger.debug(f"üìå –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {prev_pinned} –≤ —á–∞—Ç–µ {chat_id}")
                            except Exception as e:
                                error_text = str(e).lower()
                                if any(phrase in error_text for phrase in [
                                    "message to unpin not found",
                                    "message not found",
                                    "message_id_invalid"
                                ]):
                                    logger.debug(f"üìå –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {prev_pinned} —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: {e}")
                        
                        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            await self.bot.pin_chat_message(
                                chat_id=chat_id,
                                message_id=fwd.message_id,
                                disable_notification=True
                            )
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            await Repository.save_pinned_message(str(chat_id), fwd.message_id)
                            self.pinned_messages[str(chat_id)] = fwd.message_id
                            
                            logger.info(f"üìå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                            success = True
                            
                        except Exception as e:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: {e}")
                            success = True  # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
                            
                    except Exception as e:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                        error_text = str(e).lower()
                        if any(phrase in error_text for phrase in [
                            "message not found", 
                            "message to forward not found",
                            "message_id_invalid"
                        ]):
                            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            logger.info(f"üîç –ü–æ–∏—Å–∫ –±–æ–ª–µ–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                            try:
                                from utils.message_utils import find_latest_message
                                latest_message_id = await find_latest_message(self.bot, channel_id, self.config.owner_id, message_id)
                                
                                if latest_message_id and latest_message_id != message_id:
                                    logger.info(f"üì® –ù–∞–π–¥–µ–Ω–æ –±–æ–ª–µ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {latest_message_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                                    await Repository.save_last_message(channel_id, latest_message_id)
                                    return await self.forward_and_pin_message(channel_id, latest_message_id)
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                                    return False
                            except Exception as find_error:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {find_error}")
                                return False
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id} –≤ —á–∞—Ç {chat_id}: {e}")
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {chat_id}: {e}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ forward_and_pin_message: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return False
    
    async def forward_latest_messages(self) -> bool:
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        success = False
        source_channels = self.config.source_channels
        
        if not source_channels:
            logger.warning("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            return False
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(source_channels)} –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        
        target_chats = await Repository.get_target_chats()
        if not target_chats:
            logger.warning("–ù–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã.")
            return False
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(target_chats)} —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤")
        
        for channel_id in source_channels:
            message_id = await Repository.get_last_message(channel_id)
            
            if not message_id:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                continue
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            result = await self.forward_and_pin_message(channel_id, message_id)
            success = success or result
            
            if result:
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        return success
    
    async def _notify_admins(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞"""
        for admin_id in self.config.admin_ids:
            try:
                await self.bot.send_message(admin_id, message)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")