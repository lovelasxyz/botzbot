from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
from .base_command import Command
from database.repository import Repository
from utils.keyboard_factory import KeyboardFactory
from utils.bot_state import IdleState, RunningState
from utils.config import Config


class StartCommand(Command):
    def __init__(self, running: bool = False):
        super().__init__()
        self.running = running

    async def _handle(self, message: types.Message) -> None:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:\n\n"
            "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            reply_markup=KeyboardFactory.create_main_keyboard(self.running)
        )

class HelpCommand(Command):
    async def _handle(self, message: types.Message) -> None:
        help_text = (
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "/start - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/setlast <channel_id> <message_id> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é\n"
            "/getlast - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "/forwardnow - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/test <channel_id> <message_id> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ\n"
            "/findlast <channel_id> - –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."
        )
        await message.answer(help_text, parse_mode="HTML")

class SetLastMessageCommand(Command):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot

    async def _handle(self, message: types.Message) -> None:
        args = message.text.split()
        
        if len(args) != 3:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlast <channel_id> <message_id>")
            return

        try:
            channel_id = args[1]
            message_id = int(args[2])
            
            try:
                test_msg = await self.bot.forward_message(
                    chat_id=message.from_user.id,
                    from_chat_id=channel_id,
                    message_id=message_id
                )
                
                await Repository.save_last_message(channel_id, message_id)
                await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ID {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id} –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
        
        except ValueError:
            await message.answer("‚ùå ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

class GetLastMessageCommand(Command):
    async def _handle(self, message: types.Message) -> None:
        last_messages = await Repository.get_all_last_messages()
        
        if not last_messages:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ID —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return
            
        response = "üìù –¢–µ–∫—É—â–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º:\n\n"
        
        for channel_id, data in last_messages.items():
            response += f"–ö–∞–Ω–∞–ª: {channel_id}\n"
            response += f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {data['message_id']}\n"
            response += f"–í—Ä–µ–º—è: {data['timestamp']}\n\n"
        
        await message.answer(response)

class ForwardNowCommand(Command):
    def __init__(self, bot_context):
        super().__init__()
        self.context = bot_context

    async def _handle(self, message: types.Message) -> None:
        channel_id, message_id = await Repository.get_latest_message()
        
        if not channel_id or not message_id:
            await message.answer(
                "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
            return

        progress_msg = await message.answer(f"üîÑ –ü–µ—Ä–µ—Å—ã–ª–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}...")
        
        await self.context.handle_message(channel_id, message_id)
        await progress_msg.edit_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ.")

class TestMessageCommand(Command):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot

    async def _handle(self, message: types.Message) -> None:
        args = message.text.split()
        
        if len(args) != 3:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /test <channel_id> <message_id>")
            return

        try:
            channel_id = args[1]
            message_id = int(args[2])
            
            progress_msg = await message.answer(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_id}...")
            
            try:
                test_msg = await self.bot.forward_message(
                    chat_id=message.from_user.id,
                    from_chat_id=channel_id,
                    message_id=message_id
                )
                await progress_msg.edit_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–æ.")
            except Exception as e:
                await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        except ValueError:
            await message.answer("‚ùå ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

class FindLastMessageCommand(Command):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot

    async def _handle(self, message: types.Message) -> None:
        args = message.text.split()
        
        if len(args) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /findlast <channel_id>")
            return
            
        channel_id = args[1]
        progress_msg = await message.answer(f"üîç –ò—â—É –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}...")
        
        last_messages = await Repository.get_all_last_messages()
        current_id = None
        
        for chan, data in last_messages.items():
            if chan == channel_id:
                current_id = data["message_id"]
                break
        
        if not current_id:
            current_id = 1000
        
        valid_id = None
        checked_count = 0
        max_check = 100

        for msg_id in range(current_id + 10, current_id - max_check, -1):
            if msg_id <= 0:
                break

            checked_count += 1
            if checked_count % 10 == 0:
                try:
                    await progress_msg.edit_text(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked_count} —Å–æ–æ–±—â–µ–Ω–∏–π...")
                except Exception:
                    pass

            try:
                msg = await self.bot.forward_message(
                    chat_id=message.from_user.id,
                    from_chat_id=channel_id,
                    message_id=msg_id
                )
                valid_id = msg_id
                break
            except Exception as e:
                if "message not found" in str(e).lower():
                    continue
                logger.warning(f"Unexpected error checking message {msg_id} in channel {channel_id}: {e}")

        try:
            await progress_msg.delete()
        except Exception:
            pass

        if valid_id:
            await Repository.save_last_message(channel_id, valid_id)
            await message.answer(
                f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: {valid_id}) –≤ –∫–∞–Ω–∞–ª–µ {channel_id} –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ {checked_count} —Å–æ–æ–±—â–µ–Ω–∏–π."
            )
        else:
            await message.answer(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ {channel_id} –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ {checked_count} —Å–æ–æ–±—â–µ–Ω–∏–π."
            )